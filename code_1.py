# -*- coding: utf-8 -*-
"""code #1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oE_FSZrUf_sByXPluxUgLMcYMZ-3TYsc
"""

# Libraries
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import kruskal  # Kruskal-Wallis test

# System Parameters
G = 6.67430e-11  # Gravitational constant (m^3 kg^-1 s^-2)
M1 = 1e9  # Mass of the first SMBH (in solar masses)
M2 = 1e9  # Mass of the second SMBH (in solar masses)
m = 1  # Mass of the star (in solar masses)
r_bh = 200  # Initial distance between the SMBHs (in AU)
x_star = 10  # Initial x-position of the star (in AU)
y_star = 0  # Initial y-position of the star (in AU)
vx_star = 0  # Initial x-velocity of the star (in AU/s)
vy_star = 0.1  # Initial y-velocity of the star (in AU/s)

# Equations of Motion
def equations_of_motion(state):
    x, y, vx, vy = state
    x_bh1, y_bh1 = -r_bh / 2, 0  # Position of SMBH 1
    x_bh2, y_bh2 = r_bh / 2, 0  # Position of SMBH 2

    # Distances between the star and each SMBH
    r1 = np.sqrt((x - x_bh1)**2 + (y - y_bh1)**2)
    r2 = np.sqrt((x - x_bh2)**2 + (y - y_bh2)**2)

    # Gravitational accelerations
    ax = -G * M1 * (x - x_bh1) / r1**3 - G * M2 * (x - x_bh2) / r2**3
    ay = -G * M1 * (y - y_bh1) / r1**3 - G * M2 * (y - y_bh2) / r2**3

    return np.array([vx, vy, ax, ay])

# RK4 Integration Method
def rk4_step(state, dt):
    k1 = equations_of_motion(state)
    k2 = equations_of_motion(state + 0.5 * dt * k1)
    k3 = equations_of_motion(state + 0.5 * dt * k2)
    k4 = equations_of_motion(state + dt * k3)

    return state + (dt / 6) * (k1 + 2 * k2 + 2 * k3 + k4)

# Numerical Integration with RK4
t_start, t_end, steps = 0, 100, 1000
dt = (t_end - t_start) / steps
t_span = np.linspace(t_start, t_end, steps)

# Initialize state
state = np.array([x_star, y_star, vx_star, vy_star])
trajectory = []

for t in t_span:
    trajectory.append(state)
    state = rk4_step(state, dt)

trajectory = np.array(trajectory)

# Extract Values
vx_star_trajectory = trajectory[:, 2]
vy_star_trajectory = trajectory[:, 3]
velocity_magnitude = np.sqrt(vx_star_trajectory**2 + vy_star_trajectory**2)

momentum_x = m * vx_star_trajectory
momentum_y = m * vy_star_trajectory
momentum_magnitude = np.sqrt(momentum_x**2 + momentum_y**2)

acceleration_x = np.gradient(vx_star_trajectory, dt)
acceleration_y = np.gradient(vy_star_trajectory, dt)
acceleration_magnitude = np.sqrt(acceleration_x**2 + acceleration_y**2)

# Kruskal-Wallis Test for Velocity
velocity_chunks = np.array_split(velocity_magnitude, 3)  # Splitting into three sample groups
kruskal_velocity = kruskal(velocity_chunks[0], velocity_chunks[1], velocity_chunks[2])

# Kruskal-Wallis Test for Acceleration
acceleration_chunks = np.array_split(acceleration_magnitude, 3)
kruskal_acceleration = kruskal(acceleration_chunks[0], acceleration_chunks[1], acceleration_chunks[2])

# Kruskal-Wallis Test for Momentum
momentum_chunks = np.array_split(momentum_magnitude, 3)
kruskal_momentum = kruskal(momentum_chunks[0], momentum_chunks[1], momentum_chunks[2])

# Display Results
print("Kruskal-Wallis Test Results:")
print(f"Velocity H-statistic: {kruskal_velocity.statistic}, P-value: {kruskal_velocity.pvalue}")
print(f"Acceleration H-statistic: {kruskal_acceleration.statistic}, P-value: {kruskal_acceleration.pvalue}")
print(f"Momentum H-statistic: {kruskal_momentum.statistic}, P-value: {kruskal_momentum.pvalue}")

# Graphs

# Velocity Magnitude Graph
plt.figure(figsize=(8, 6))
plt.plot(t_span, velocity_magnitude, label="Velocity Magnitude")
plt.xlabel("Time (s)")
plt.ylabel("Velocity (AU/s)")
plt.title("Velocity Magnitude of the Star")
plt.grid(True)
plt.legend()
plt.show()

# Momentum Magnitude Graph
plt.figure(figsize=(8, 6))
plt.plot(t_span, momentum_magnitude, label="Momentum Magnitude")
plt.xlabel("Time (s)")
plt.ylabel("Momentum (AU·kg/s)")
plt.title("Momentum Magnitude of the Star")
plt.grid(True)
plt.legend()
plt.show()

# Acceleration Magnitude Graph
plt.figure(figsize=(8, 6))
plt.plot(t_span, acceleration_magnitude, label="Acceleration Magnitude")
plt.xlabel("Time (s)")
plt.ylabel("Acceleration (AU/s²)")
plt.title("Acceleration Magnitude of the Star")
plt.grid(True)
plt.legend()
plt.show()